@doc Generic Transform takes care of transforming high-level data models to low-level data
models.  The aim of the {@link ec_genet} and {@link ec_genet_server} modules is to enable
a mapping writer to deal with simple cases as easily as possible, as well as to help with
more complex ones.

<p>This is a brief overview of a mapping operation:</p>
<ol style="list-style-type: decimal">
<li>the operator performs an action such as <code>commit</code>, <code>show running-config</code> etc. that addresses data in the high-level data model; ConfD invokes appropriate DP-API function in {@link ec_genet_server}</li>
<li>based on the path prefix, appropriate mapping module and the registered function (such as {@link ec_map_bgp:get_mappings/1}) is looked up, invoked to get a mapping, <code>inherit</code> is processed</li>
<li>if the mapping contains the right <em>override</em> callback (such as the <code>exists</code> field in case of existence check), it is invoked and the result returned to ConfD</li>
<li>high-level path is rewritten to low-level path using callbacks like <code>fdnkeys</code> (if defined)</li>
<li>the operation on the low-level path is performed (a leaf value set or retrieved, list instance found, etc.) and the result returned to ConfD.</li>
</ol>
== DP-API callbacks ==

<p>The DP-API functions mentioned above are the only interface for ConfD to query about the status of high-level configuration, or to notify about changes in the high-level configuration. Some of the DP-API functions are optional; the <code>ec_genet</code> framework implements the following ones (see the ConfD documentation, <code>confd_lib_dp</code> manpage for more details on DP-API functions, especially the documentation for <code>confd_register_data_cb</code>):</p>
<ul>
<li><p><strong><code>get_elem</code></strong></p>
<p>This callback function needs to return the value of a specific leaf. Invoked by ConfD during <em>show</em> and also during <em>set</em> operations to get a leaf value (or the <code>not_found</code> response), or on a list key for a particular list instance to verify whether the instance exists.</p></li>
<li><p><strong><code>get_next</code></strong></p>
<p>This callback makes it possible for ConfD to traverse a set of list entries. Invoked during <em>show</em> operations on a list to retrieve - one by one - list instances (i.e. key values).</p></li>
<li><p><strong><code>set_elem</code></strong></p>
<p>This callback writes the value of a leaf. Invoked during commit.</p></li>
<li><p><strong><code>create</code></strong></p>
<p>Invoked by ConfD during commit to create a new list entry, a presence container, or a leaf of type empty.</p></li>
<li><p><strong><code>remove</code></strong></p>
<p>This callback is used to remove an existing list entry, a presence container, or an optional leaf and all its sub nodes (if any) during commit. Its DP-API override counterpart is named as <code>delete</code>.</p></li>
<li><p><strong><code>exists_optional</code></strong></p>
<p>Used by ConfD to detect existence of presence container or leafs of type empty during <em>show</em> and <em>set</em> operations. Its DP-API override counterpart is named as <code>exists</code>.</p></li>
<li><p><strong><code>get_case</code></strong></p>
<p>Used by ConfD on a choice during <em>show</em> and <em>set</em> operations to query what of the choice cases exists.</p></li>
<li><p><strong><code>set_case</code></strong></p>
<p>This callback will be invoked by ConfD during commit to set a case of a choice.</p></li>
</ul>
<p>For each of the DP-API functions we can define a <em>override</em> (see below for more on overrides); just note that a DP-API function and its <em>override</em> are not the same things.</p>
== The mappings record ==

<p>The central part in guiding the genet code is the type {@link ec_genet:mappings()}. Below is a complete list of fields that can be used; but in typical cases only few of them need to be defined - in the simplest cases only <code>path', or</code>inherit' and `relpath'.</p>
<p>In many cases, the way how given field is used (if at all) is given by what DP-API function has been invoked by ConfD. This also means that for mappings attached to a particular node some fields would never be used - for instance, defining <code>fupkeys</code> for a mapping attached to a leaf does not make sense.</p>
<p>Note that if for given DP-API invocation the mappings record contains the corresponding <em>override</em>, other mappings fields are ignored.</p>
<dl>
<dt><strong><code>path</code></strong><code>: ikeypath()</code></dt>
<dd><p>The destination low-level path. Can contain instantiated keys based on keys in the high-level path, or empty tuples (<code>{}</code>) that will be instantiated later using <code>fdnkeys</code>. See below for more on keys.</p>
</dd>
<dd><p>Used: all DP-API invocations except when <code>inherit</code> and <code>relpath</code> is set.</p>
</dd>
<dt><strong><code>inherit</code></strong><code>: ikeypath()</code></dt>
<dd><p>This fields indicates that the mapping should be derived from another mapping. The value of this field is a high-level path that will be used when looking up the derived-from mapping; the path is typically in the form <code>tl(HLPath)</code> (where <code>HLPath</code> is the high-level path being currently processed). Any fields defined in this mapping will override fields in the derived-from mapping.</p>
</dd>
<dd><p>Used: all DP-API invocations.</p>
</dd>
<dt><strong><code>relpath</code></strong><code>: ikeypath()</code></dt>
<dd><p>A relative low-level path. Used with <code>inherit</code>; if the derived-from mapping defines <code>path</code> (directly or again through <code>inherit</code>), the field <code>path</code> for this mapping is set to concatenation of <code>relpath</code> and the inherited <code>path</code>.</p>
</dd>
<dd><p>Used: all DP-API invocations if <code>inherit</code> is set.</p>
</dd>
<dt><strong><code>nested</code></strong><code>: [mappings()]</code></dt>
<dd><p>List of mappings that will be all sequentially applied after all path mapping functions have been applied. The top-level mapping does not need to contain the low-level path, in which case the nested mappings receive the unmodified high-level path.</p>
</dd>
<dd><p>Used: all DP-API invocations.</p>
</dd>
<dt><strong><code>extra</code></strong><code>: any()</code></dt>
<dd><p>Any auxiliary data (e.g. key values) that will be needed in subsequent mapping functions (such as <code>fdnkeys</code>, <code>fdnval</code> etc.); the value of <code>extra</code> is passed unchanged as the <code>Extra</code> argument.</p>
</dd>
<dd><p>Used: all DP-API invocations.</p>
</dd>
<dt><strong><code>fexists</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Extra :: any()) -&gt; not_found | any()</code></dt>
<dd><p>Guard callback invoked before any processing starts; if the callback returns <code>{ok, not_found}</code>, no further processing is performed and appropriate value is returned.</p>
</dd>
<dd><p>Used: <code>get_elem</code>, <code>exists</code>, <code>get_next</code>, <code>get_case</code>, and <code>delete</code> DP-API invocations.</p>
</dd>
<dt><strong><code>fdnpath</code></strong><code>: (Tctx :: confd_trans_ctx(), KeyedLLPath :: ikeypath(), Extra :: any()) -&gt; ikeypath()</code></dt>
<dd><p>Callback invoked with low-level path. It is supposed to be used if the built-in path processing mechanisms are not enough; receives preprocessed low-level path and should return the final low-level path.</p>
</dd>
<dd><p>Used: all DP-API invocations.</p>
</dd>
<dt><strong><code>fopmap</code></strong><code>: (Tctx :: confd_trans_ctx(), Op :: atom(), Path :: ikeypath(), Arg :: any(), Mappings :: mappings()) -&gt; {confd_trans_ctx(), atom(), ikeypath(), any(), mappings()}</code></dt>
<dd><p>Callback invoked after path has been transformed, but before the final low-level operation is performed. Can be used e.g. to change the destination operation.</p>
</dd>
<dd><p>Used: all DP-API invocations, except when the mapping contains <code>nested</code>.</p>
</dd>
<dt><strong><code>fupkeys</code></strong><code>: (Tctx :: confd_trans_ctx(), Op :: atom(), Keys :: key(), Extra :: any()) -&gt; key()</code></dt>
<dd><p>Transformation from low-level key values to high-level key values.</p>
</dd>
<dd><p>Used: only for <code>get_next</code> invocation on the result returned from the low-level configuration before the value is returned to ConfD.</p>
</dd>
<dt><strong><code>fdnkeys</code></strong><code>: (Tctx :: confd_trans_ctx(), KeySet :: [key()], Extra :: any()) -&gt; [key()]</code></dt>
<dd><p>Transformation from high-level key values to low-level key values. For simple value mapping such callback is not needed and the key value can be written directly into the low-level path (with the right mapping function); but if e.g. full access to the transaction is needed while transforming the value, <code>fdnkeys</code> callback is the way to go.</p>
</dd>
<dd><p>Used: for all DP-API invocations.</p>
</dd>
<dt><strong><code>fupval</code></strong><code>: (Tctx :: confd_trans_ctx(), Op :: atom(), RawVal :: value(), Extra :: any()) -&gt; value()</code></dt>
<dd><p>Callback to transform a leaf value from low-level to high-level data model.</p>
</dd>
<dd><p>Used for <code>get_elem</code>, <code>get_case</code>, or <code>exists</code> invocations.</p>
</dd>
<dt><strong><code>fdnval</code></strong><code>: (Tctx :: confd_trans_ctx(), Op :: atom(), RawVal :: value(), Extra :: any()) -&gt; value()</code></dt>
<dd><p>This is invoked to transform a high-level value to its low-level representation.</p>
</dd>
<dd><p>Used: for <code>set_elem</code> and <code>set_case</code> invocations.</p>
</dd>
</dl>
== DP-API overrides ==

<p>In case the genet processing is too restrictive, it is possible to skip most of it and use one of the following <em>overrides</em>; they correspond to their DP-API counterparts, and given override can be invoked if and only if the corresponding called DP-API function has been invoked for given element; the only exception is that <code>get_elem</code> override is invoked if <code>exists_optional</code> DP-API has been invoked and <code>exists</code> override not defined.</p>
<p>Again, this means that some combinations of node and an override for its mapping are meaningless, such as <code>get_elem</code> override in a mapping for a list will never be invoked.</p>
<ul>
<li><strong><code>get_elem</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Extra :: any()) -&gt; value() | not_found | err()</code></li>
<li><strong><code>exists</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Extra :: any()) -&gt; boolean() | err()</code></li>
<li><strong><code>create</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Extra :: any()) -&gt; ok | err()</code></li>
<li><strong><code>delete</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Extra :: any()) -&gt; ok | err()</code></li>
<li><strong><code>set_elem</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Val :: value(), Extra :: any()) -&gt; ok | err()</code></li>
<li><strong><code>get_next</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), C :: maapi_cursor(), Extra :: any()) -&gt; {false, undefined} | {ok, key(), maapi_cursor()} | err()</code></li>
<li><strong><code>get_case</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Choice :: qtag() | [qtag()], Extra :: any()) -&gt; qtag() | err()</code></li>
<li><strong><code>set_case</code></strong><code>: (Tctx :: confd_trans_ctx(), HLPath :: ikeypath(), Choice :: qtag() | [qtag()], qtag(), Extra :: any()) -&gt; ok | err()</code></li>
</ul>
